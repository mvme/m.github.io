---
layout: post
title: "git"
date: 2018-03-30 09:44:23 +0800
comments: true
categories:
---

在Linux上安装Git
==================================
首先,你可以试着输入`which -a git`看看系统有没有安装Git

如果你碰巧用Debian或Ubuntu Linux，通过一条`sudo apt-get install git`就可以直接完成Git的安装，非常简单。

老一点的Debian或Ubuntu Linux，要把命令改为`sudo apt-get install git-core`

查看正在使用的git版本`git --version`

配置环境变量编辑文件`vim /etc/profile`或者`vim ~/.bashrc`输入内容`export PATH=/usr/local/git/bin:$PATH`然后使其生效
`source /etc/profile`

> 自动完成配置:
>
> 浏览器地址栏输入： [https://github.com/git/git](https://github.com/git/git "git源码下载").下载并解压git源码，
>
> 拷贝git-master/contrib/completion文件夹下的`cp git-completion.bash ~/`
> 和`cp git-prompt.sh ~/`，编辑`vim ~/.bashrc`
>
> 加上以下内容`. ~/git-completion.bash`回车`. ~/git-prompt.sh`
>
> 保存退出，使其生效`source ~/.bashrc`
>

-----------------------------------------

#Git基本配置
> * `git config --global user.name "Your Name"`
>
> * `git config --global user.email "email@example.com"`

-------------------------------------------------

#Git命令

> 增加用户：`git config --global --add user.name eoe`
>
> 查看用户：`git config user.name`或`git config --get user.name`
>
> 删除用户：`git config --global --unset user.name`或
> `git config --global --unset user.name eoe`
>
> 查看全部用户：`git config --list --global`
>
> 起别名：`git config --global alias.co checkout`、
> `git config --global alias.lol "log --oneline --decorate --graph --all"`
>
> 初始化本地git仓库（创建新仓库）：`git init`（git init /app/MyGit）
> 会创建一个.git文件夹
>
> 创建裸仓库(不带工作区)：`git init --bare /app/MyGit`
>
> Git从远程服务器仓库克隆：`git clone git@github.com:git/git.git`
>
> 删除暂存区和工作区的文件：`git rm file`
>
> 查看当前版本状态：`git status`
>
> 还原删除的文件：通过查看当前版本状态先还原到暂存区，然后使用命令`git checkout -- <file>`
> 还原到工作区
>
> 只删除暂存区的文件：`git rm --cached file`
>
> 重命名文件：`git mv file1 file2`其实际上并没有重命名一说，只是一系列的操作组合,本地操作
> `mv file1 file2`然后添加到暂存区`git add file1 file2`
>
> 把整个工作区添加到暂存区：`git add .`或
> `git add -A`
>
> 文件提交：`git commit -m "Initial commit"`
>
> .gitignore文件说明哪些不需要提交，eg:*.[oa]会不提交以.o或.a结尾的文件，*.pyc不提交以.pyc结尾的文件但是test.pyc需要提交，
> !test.pyc这样就行了，如果要忽略!test.py这样的文件，\!test.py

本地项目同步到coding.net
-------------------------------------------------
> `mkdir myCoding`
>
> `cd myCoding`
>
> `git init`
>
> `echo "# myCoding" >> README.md`
>
> `git add README.md`
>
> `git commit -m "first commit"`
>
> `git remote add origin https://git.coding.net/***/myCoding.git`
>
> `git push -u origin master`

SSH公钥设置
-----------------------------------------------------
> `ssh-keygen -t rsa -C "your_email@example.com"`
>
> `eval "$(ssh-agent -s)"`
>
> `ssh-add ~/.ssh/id_rsa`，这里如果出现
> Could not open a connection to your authentication agent.错误提示先执行`ssh-agent.exe bash`
>
> `vim ~/.ssh/id_rsa.pub`
> 拷贝里面的内容SSH公钥，公钥名称可以随便起
>
> `ssh -T git@github.com`验证github，
> `ssh -T git@git.coding.net`验证coding.net

git clone
-------------------------------------------------------
> `git clone <版本库的网址>`
>
> eg:克隆jQuery的版本库`git clone https://github.com/jquery/jquery.git`该命令会在本地主机生成一个目录，与远程主机的版本库同名
>
> 如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数`git clone <版本库的网址> <本地目录名>`
>
> 克隆版本库的时候，所使用的远程主机自动被Git命名为origin。如果想用其他的主机名，需要用git clone命令的-o选项指定
> `git clone -o jQuery https://github.com/jquery/jquery.git`
>
> 注：在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支

git remote
---------------------------------------------------------
> 为了便于管理，Git要求每个远程主机都必须指定一个主机名。`git remote`命令就用于管理主机名。
> 不带选项的时候，git remote命令列出所有远程主机。
>
> 使用-v选项，可以参看远程主机的网址`git remote -v`
>
> git remote show命令加上主机名，可以查看该主机的详细信息`git remote show <主机名>`
>
> git remote add命令用于添加远程主机`git remote add <主机名> <网址>`
>
> git remote rm命令用于删除远程主机`git remote rm <主机名>`
>
> git remote rename命令用于远程主机的改名`git remote rename <原主机名> <新主机名>`

git fetch
-------------------------------------------------------
> 一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到git fetch命令
>
> `git fetch <远程主机名>`
>
> 上面命令将某个远程主机的更新，全部取回本地。
>
> 默认情况下，git fetch取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。
>
> `git fetch <远程主机名> <分支名>`
>
> 比如，取回origin主机的master分支`git fetch origin master`
>
> 所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取
>
> 在本地分支上合并远程分支`git merge origin/master`在当前分支上，合并origin/master

git branch
-------------------------------------------------------
> 查看本地分支：`git branch`
>
> 查看服务器分支：`git branch -r`
>
> 显示本地、服务器所有分支：`git branch -a`
>
> 创建本地分支：`git branch <new_branch_name>`
>
> 切换分支：`git checkout <branch_name>`
>
> 创建并切换分支：`git checkout -b <new_branch_name>`
>
> 创建切换分支并还原当前之前的一个提交：`git checkout -b <new_branch_name> HEAD~`
>  
> 删除本地分支：`git branch -d <branch_name>`
>
> 删除远程分支：`git push origin --delete <branch_name>`或
> `git push origin :<branch_name>`
>
> 建立追踪关系：`git branch --set-upstream master origin/master`
> 这个已经废弃，马上删除
>
> `git branch --set-upstream-to=<远程主机名/远程分支名> <本地分支名>`

git pull
------------------------------------------------------------
> git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并，这等同于先做git fetch，再做git merge
>
> 完整格式：`git pull <远程主机名> <远程分支名>:<本地分支名>`
>
> 如果远程分支是与当前分支合并，则冒号后面的部分可以省略：
> `git pull <远程主机名> <远程分支名>`
>
> 如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名：
> `git pull <远程主机名>`
>
> 如果当前分支只有一个追踪分支，连远程主机名都可以省略：
> `git pull`

git push
---------------------------------------------------------------
> git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。
>
> `git push <远程主机名> <本地分支名>:<远程分支名>`
>
> 注意，分支推送顺序的写法是<来源地>:<目的地>，所以git pull是<远程分支>:<本地分支>，而git push是<本地分支>:<远程分支>。
>
> 如果省略远程分支名，则表示将“本地”分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建
>
> `git push <远程主机名> <本地分支名>`
>
> 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。
>
> `git push origin :master` 等同于`git push origin --delete master`表示删除origin主机的master分支
>
> 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略，
> `git push origin`表示，将“当前”分支推送到origin主机的对应分支
>
> 如果当前分支只有一个追踪分支，那么主机名都可以省略`git push`
>
> 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push
>
> `git push -u origin master`
>
> 上面命令将本地的master分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push了
>
>     不带任何参数的git push，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。
>     Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用git config命令。
> `git config --global push.default matching`或者
> `git config --global push.default simple`
>
> 还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用–all选项
>
> `git push --all origin`
>
> 上面命令表示，将所有本地分支都推送到origin主机
>
> 如果远程主机的版本有更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用–force选项
>
> `git push --force origin`
>
> 上面命令使用–force选项，结果导致在远程主机产生一个”非直进式”的合并（non-fast-forward merge）。除非你很确定要这样做，否则应该尽量避免使用–force选项
>
> 最后，git push不会推送标签（tag），除非使用–tags选项
>
> `git push origin --tags`

git tag
-------------------------------------------------
> 让引用指向固定的提交
>
> 先使用`git log --oneline --decorate --graph --all`查看Hash码
>
> `git tag <"tagName"> <Hash码>`轻量级的本地引用,eg:`git tag "v0" alaba30`,如果不带Hash的话，默认指向当前的commit
>
> `git tag -a <"tagName"> <Hash码>`带注解的，当你需要的时候可以推送到服务器上用于共享
>
> `git tag`查看当前的tag
>
> `git show <tagName>`
>
> `git checkout <tagName>`指向一个commit，而不是一个分支名，当切换回其他分支的时候，这部分历史就会丢弃掉，可以使用`git checkout -b <new_branch_name>`创建一个分支并切换到这个分支上面，当你做了一些操作，只是git add -A，而没有git commit，这时候要git checkout <branch_name>切换到其他分支的时候会提示报错，提示你本地一些修改还没有被提交，这个时候可以使用 `git stash save -a <"stash_name">`,-a参数可以把暂存区保存起来，你就可以切换到其他分支
>
> `git stash list`可以查看当前的tag里面的stash
>
> `git stash pop --index <stash_name>` ,index参数会把暂存区也还原回去，这个命令会把stash里面的记录给清除掉
>
> `git stash apply --index <stash_name>`,还原工作区和暂存区，但不删除stash里面的记录
>
> `git stash drop <stash_name>`用于清除stash记录
>
> 如果有多个stash记录要清理使用`git stash clear`

分支合并
----------------------------------------------------
> `git merge <branch_name>`合并到当前分支
>
> `git merge --abort`放弃合并

历史记录
--------------------------------------------------
> `git log`按空格或者f向下翻页，按b向上翻页，或者键盘上下键单行翻页，按q退出
> `git log -p`输出每一个commit之间的差异信息
>
> `git log --stat`输出每一个commit之间差异的统计信息
>
> `git log --oneline`输出单行的信息
>
> `git log --decorate`输出commit引用的信息
>
> `git log --graph`输出图形化的历史信息
>
> `git log --all`输出所有分支的信息
>
> `git show HEAD`查看当前分支最新的提交
>
> `git show <branch_name>`
>
> `git show <Hash码>`
>
> `git show --oneline --stat master^`或者`git show --oneline --stat master~`
>
> `git show --format=%T master`格式化输出master
>
> `git diff`输出工作区和暂存区的差异
>
> `git diff --cached`暂存区和历史提交的差异
>
> `git diff HEAD~2`当前工作区与其他历史提交的差异
>
> `git diff HEAD~2 -- <file>`当前工作区与其他历史提交的某个特定文件的差异
>
> `git diff HEAD HEAD~2`比较两个commit对象的差异
>
> `git diff HEAD HEAD~2 -- <file>`
>
> `git diff --color-words`
>
> `git diff --word-diff`

撤销修改
--------------------------------------------------------
> `git checkout`还原工作区
>
> `git checkout -- <file>`
>
> `git checkout <tag_name|Hash> -- <file>`
>
> `git checkout HEAD -- <file>`还原工作区和暂存区到最新的提交
>
> `git checkout HEAD~ -- <file>`还原工作区和暂存区到之前的提交
>
> `git reset`还原暂存区
>
> `git reset <tag_name|Hash> -- <file>`
>
> `git clean`清理未添加进暂存区的文件(未跟踪文件)，默认不清理.gitignore里面的文件
>
> `git clean -n`查看要删除的文件
>
> `git clean -f`删除未跟踪文件
>
> `git clean -n -X`查看要删除的文件
>
> `git clean -X -f`清理.gitignore里面的文件，保留之外的文件
>
> `git revert HEAD`产生一个新的提交覆盖之前的提交所产生的修改

历史重写
-------------------------------------------------------
> `git commid --amend`重写上一个提交历史记录
>
> `git rebase <分支名>`线性历史
>
> `git rebase --abort`撤销
>
> `git rebase --continue`有冲突的话先修改冲突，然后再`git add <file>`
>
> `git reflog`
>
> `git reset --hard <HEAD@{num}>`还原暂存区和工作区
>
> `git reset --soft <HEAD@{num}>`什么都不还原
>
> `git reset --mixed HEAD~`只还原暂存区
>
> `git reset -10>`最近10条HEAD引用




ruby安装
=================================================
主要注意在选择安装位置的时候一定要勾选上Add Ruby exeoutables to your PATH 这个选项，就是把ruby添加到环境变量,右击Git Bash Here，输入`ruby --version`

ruby关联DevKit
============================================
安装DevKit,然后打开DevKit的安装目录

右击Git Bash Here输入命令`ruby dk.rb init`,这时候如果没有出现
found RubyInstaller v2.1.3 at <filePath>(ruby目录)，
则需要编辑`vi config.yml`添加上ruby的目录即可再执行`ruby dk.rb install`

Octopress安装
==========================================
官网：octopress.org

克隆Octopress至本地

`git clone git://github.com/imathis/octopress.git octopress`

安装依赖项
---------------------------------------

配置安装网址：`gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/`

查看配置：`gem sources -l`

修改`vi Gemfile`,修改里面的source为：https://ruby.taobao.org/

其实直接执行下面两部就可以安装，但是由于上面的设置把安装网址改成了国内的，如果不修改有可能安装失败

执行安装：`gem install bundler`

继续安装：`bundle install`

安装并使用默认主题
---------------------------------------------------------

安装使用默认主题：`rake install`

生成本地预览 `rake generate`

本地开服务器：`rake preview`

浏览器输入 localhost:4000这时打开会很慢，编辑\octopress\source\_includes\head.html,
把jquery的jar引用改成`<script src="//libs.baidu.com/jquery/1.9.1/jquery.min.js"></script>`

生成博客与单页面
=========================================================
新建博客：
--------------------
rake new_post["title"]

新建单页面：
----------------------------
	rake new_page[jikexueyuan]
	# creates/source/jikexueyuan/index.markdown

	rake new_page[jikexueyuan/page.html]
	# ctreates/source/jikexueyuan/page.html


部署网址至GitHub
========================================================
> gitHub上面新建仓库：username.github.io

> 与本地Octopress目录绑定：

>     rake setup_github_pages

> rake deploy


自定义网站域名：
===================================================
echo "domain.com" >> source/CNAME

# OR

echo "www.domain.com" >> source/CNAME

使用子域名

 对于子域名（www.jikexueyuan.com）,创建CNAME记录指向charlie.github.io

使用顶级域名

对于顶级域名（jikexueyuan.com）,s使用A记录指向192.30.252.153(154)
